#include <windows.h>
#include <iostream>
#include <stdio.h>
#include <tchar.h>

using namespace std;

#define DIV 1024

#define WIDTH 7

#define INFO_BUFFER_SIZE 32767
DWORD  bufCharCount = INFO_BUFFER_SIZE;
TCHAR  infoBuf[INFO_BUFFER_SIZE];


void _tmain() {

	setlocale(LC_ALL, "Russian");

	cout << "Disc:" << endl;

	MEMORYSTATUSEX statex;

	statex.dwLength = sizeof(statex);

	GlobalMemoryStatusEx(&statex);

	_tprintf(TEXT("There is  %*ld percent of memory in use.\n"),
		WIDTH, statex.dwMemoryLoad);
	_tprintf(TEXT("There are %*I64d total KB of physical memory.\n"),
		WIDTH, statex.ullTotalPhys / DIV);
	_tprintf(TEXT("There are %*I64d free  KB of physical memory.\n"),
		WIDTH, statex.ullAvailPhys / DIV);
	_tprintf(TEXT("There are %*I64d total KB of paging file.\n"),
		WIDTH, statex.ullTotalPageFile / DIV);
	_tprintf(TEXT("There are %*I64d free  KB of paging file.\n"),
		WIDTH, statex.ullAvailPageFile / DIV);
	_tprintf(TEXT("There are %*I64d total KB of virtual memory.\n"),
		WIDTH, statex.ullTotalVirtual / DIV);
	_tprintf(TEXT("There are %*I64d free  KB of virtual memory.\n"),
		WIDTH, statex.ullAvailVirtual / DIV);


	_tprintf(TEXT("There are %*I64d free  KB of extended memory.\n"),
		WIDTH, statex.ullAvailExtendedVirtual / DIV);

	cout << endl << "Web and Monitor:" << endl;

	BOOL fResult;
	int aMouseInfo[3];

	fResult = GetSystemMetrics(SM_MOUSEPRESENT);

	if (fResult == 0)
		printf("No mouse installed.\n");
	else
	{
		printf("Mouse installed.\n");

		fResult = GetSystemMetrics(SM_SWAPBUTTON);

		if (fResult == 0)
			printf("Buttons not swapped.\n");
		else printf("Buttons swapped.\n");

		fResult = SystemParametersInfo(
			SPI_GETMOUSE,  
			0,             
			&aMouseInfo,    
			0);          

		if (fResult)
		{
			printf("Speed: %d\n", aMouseInfo[2]);
			printf("Threshold (x,y): %d,%d\n",
				aMouseInfo[0], aMouseInfo[1]);
		}
	}

	cout << endl << "Name user and Programm settings:" << endl;

	TCHAR buffer[256] = TEXT("");
	TCHAR szDescription[8][32] = { TEXT("NetBIOS"),
		TEXT("DNS hostname"),
		TEXT("DNS domain"),
		TEXT("DNS fully-qualified"),
		TEXT("Physical NetBIOS"),
		TEXT("Physical DNS hostname"),
		TEXT("Physical DNS domain"),
		TEXT("Physical DNS fully-qualified") };
	int cnf = 0;
	DWORD dwSize = _countof(buffer);

	for (cnf = 0; cnf < ComputerNameMax; cnf++)
	{
		if (!GetComputerNameEx((COMPUTER_NAME_FORMAT)cnf, buffer, &dwSize))
		{
			_tprintf(TEXT("GetComputerNameEx failed (%d)\n"), GetLastError());
			return;
		}
		else _tprintf(TEXT("%s: %s\n"), szDescription[cnf], buffer);

		dwSize = _countof(buffer);
		ZeroMemory(buffer, dwSize);
	}

	cout << endl;

	bufCharCount = INFO_BUFFER_SIZE;
	if (!GetUserName(infoBuf, &bufCharCount))
		_tprintf(TEXT("GetUserName"));
	_tprintf(TEXT("\nUser name:          %s \n"), infoBuf);


	system("pause");
}
