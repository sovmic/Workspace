#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

//алгоритм: запись числа в виде A = (-1)^S * M * 2^E
//записываем число в формате M * 2^E
//0.25 = .01
//num * 2 = string - int(num) * 2  

string to_binary_int(int num) {
	if (num == 0) {
		return "";
	}

	return to_binary_int(num / 2) + to_string(num % 2);
}

string to_binary_fraction(double num) {
	if (num != 1 and num < 1) {
		num *= 2;
		return to_binary_fraction(num) + to_string(int(num));
	}
	else if (num > 1) {
		num = (num - int(num)) * 2;
		return to_binary_fraction(num) + to_string(int(num));
	}

	return "";
} 


int main() {

	setlocale(LC_ALL, "RUSSIAN");
	double num = 24.25;
	double fraction = num - int(num);

	cout << "ABS bin int number: " << to_binary_int(abs(num)) << endl;

	//создание вектора из нулей для корректной перезаписи двоичного числа
	vector <int> binary = {};

	for (int i = 0; i < 8; i++) {
		binary.push_back(0);
	}

	//определяем длину двоичной записи
	int temp = stoi(to_binary_int(abs(num)));
	int count = 0;
	while (temp >= 1) {
		temp /= 10;
		count++;
	}

	//создаём вектор из индексов в которых есть разряды двоек
	vector <int> numbers = {};
	temp = stoi(to_binary_int(abs(num)));
	for (int i = 0; i < count; i++) {
		if (temp % 10 == 1) {
			numbers.push_back(i);
			temp /= 10;
		}
		else {
			temp /= 10;
		}
	}

	//заполняем первый вектор индексами в правильном порядке
	for (int i = 7; i > -1; i--) {
		for (int j = numbers.size() - 1; j > -1; j--) {
			if (i == numbers[j]) {
				binary[i] = 1;
			}
		}
	}
	reverse(binary.begin(), binary.end());

	if (num < 0) {

		//инвертируем вектор
		for (int i = 0; i < binary.size(); i++) {
			if (binary[i] == 0) {
				binary[i] = 1;
			}
			else if (binary[i] == 1) {
				binary[i] = 0;
			}
		}

		//делаем побитовое прибавление разряда
		binary[binary.size() - 1] += 1;
		for (int i = binary.size() - 1; i > -1; i--) {
			if (binary[i] == 2) {
				binary[i] = 0;
				if (i != 0) {
					binary[i - 1] += 1;
				}
			}
		}
	}

	for (int i = 0; i < binary.size(); i++) {
		if (i == 4) {
			cout << " ";
		}
		cout << binary[i];
	}

	//обработка числа после точки

	vector <int> fraction_of_num = {};

	temp = stoi(to_binary_fraction(abs(fraction)));

	count = 0;
	while (temp >= 1) {
		temp /= 10;
		count++;
	}

	temp = stoi(to_binary_fraction(abs(fraction)));
	for (int i = count; i > 0; i--) {
		fraction_of_num.push_back(temp % 10);
		temp /= 10;
	}

	cout << ".";

	for (int i = 0; i < fraction_of_num.size(); i++) {
		cout << fraction_of_num[i];
	}

	//знак - 1 бит. порядок - 8 бит. мантисса 23 + 1 - бит 
	cout << endl;
	cout << "\t\t       Знак  Экспонента и остаток";
	cout << endl << "Итоговое представление: ";

	vector <int> result = {};

	if (int(num) < 0) {
		result.push_back(1);
	}
	else result.push_back(0);

	for (int i = 0; i < binary.size(); i++) {
		result.push_back(binary[i]);
	}
	for (int i = 0; i < fraction_of_num.size(); i++) {
		result.push_back(fraction_of_num[i]);
	}

	//форматирование вывода

	int count_0 = 0;
	int count_1 = 0;

	for (int i = 0; i < result.size(); i++) {
		if (result[i] == 0) {
			count_0++;
		}
		else if (result[i] == 1) {
			count_1++;
		}
	}

	for (int i = 0; i < result.size(); i++) {
		if (i == 0) {
			cout << result[i] << "\t";
		}
		if (i != 0 and (i == count_0 - count_1)) {
			cout << ".";
		}
		cout << result[i];
	}
}
